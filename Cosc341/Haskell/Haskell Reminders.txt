Chapter 2:
2.3: Lists
++ puts together two lists but don't use it on long lists because it Haskell interates through the left list
: before an array like 5 : [1,2,3,4] places the value at the beinning of the array
!! gets an element out of array. [1,2,3,4,5] !! 1 gets the value 2
lists within lists just be the same type
comparison between lists goes in lexicographical order (1st element is compared then 2nd and so forth)
	for the next few commands, the command simply goes at the beginning before the list
head returns the first element of a list
tail chops off the head of a list and returns it
last takes a list and returns its last element
init takes a list and returns everything except its last elements
length returns the length of the list
null is a boolean operator that checks if a list is empty or not
reverse reverses a list
take takes a number and a list and removes that number from the beginning of the list
drop takes a number and removes that number of elements from the beginning of the list
maximum takes a list and returns the largest element
minimum returns the smallest
sum returns the sum of all the elemtns of a list
product takes a list of numbers and returns their product
elem is a boolean operator that is true or false if the thing is an element of the list 
4 'elem' [3,4,5,6] == true
4 'elem' [3,5,6] == false

2.4: Ranges
[1..20] gives a list from 1 to 20
[1,3..33] gives a list from 1 to 33 incrementing by 2
take 24 [13,26] gives the first 24 numbers of that list
cycle takes a list and makes it an infite list. Use with take to ensure a certain amount of elements
repeat takes and element and produces an infinite list of just that element
replicate takes two numbers. The first is the number of elements in the array and the second is the number of that array
replicate 3 10 returns [10,10,10]

2.5: List Comprehension
[x*2 | x <- [1..10]] returns every value between 1 and 10 doubled
conditions can be added to the end of these list commands
[x*2 | x <- [1..10] , x*2 >= 12]
_ is the way of showing tha thte variable name is never used.

2.6: Tuples
Each tuple has its own type
fst takes a pair and returns the first component
snd takes a pair and returns the 2nd compononet
^^^these two only work on pairs
zip takes two lists and zips them together creating a list of tuples if the sizes dont match, the longer list gets cut off to match the shorter one

Chapter 3:
3.1:
:t before any expression returns its type
:: means has type of
Interger can represent numbers larger than Int
Float is a floating point with single precision
Double is a floating point with double the precision
Bool is a boolean type
Char represents a char and a list of chars is a string